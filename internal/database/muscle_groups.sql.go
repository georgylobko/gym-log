// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: muscle_groups.sql

package database

import (
	"context"
)

const createMuscleGroup = `-- name: CreateMuscleGroup :one
INSERT INTO muscle_groups (name, photo_url)
VALUES ($1, $2)
RETURNING id, name, photo_url
`

type CreateMuscleGroupParams struct {
	Name     string
	PhotoUrl string
}

func (q *Queries) CreateMuscleGroup(ctx context.Context, arg CreateMuscleGroupParams) (MuscleGroup, error) {
	row := q.db.QueryRowContext(ctx, createMuscleGroup, arg.Name, arg.PhotoUrl)
	var i MuscleGroup
	err := row.Scan(&i.ID, &i.Name, &i.PhotoUrl)
	return i, err
}

const getMuscleGroups = `-- name: GetMuscleGroups :many
SELECT id, name, photo_url FROM muscle_groups
`

func (q *Queries) GetMuscleGroups(ctx context.Context) ([]MuscleGroup, error) {
	rows, err := q.db.QueryContext(ctx, getMuscleGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MuscleGroup
	for rows.Next() {
		var i MuscleGroup
		if err := rows.Scan(&i.ID, &i.Name, &i.PhotoUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
