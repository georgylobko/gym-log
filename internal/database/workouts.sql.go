// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: workouts.sql

package database

import (
	"context"
	"time"
)

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO workouts (user_id, created_at, updated_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, created_at, updated_at
`

type CreateWorkoutParams struct {
	UserID    int32
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, createWorkout, arg.UserID, arg.CreatedAt, arg.UpdatedAt)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkoutById = `-- name: GetWorkoutById :one
SELECT id, user_id, created_at, updated_at FROM workouts
WHERE id = $1
`

func (q *Queries) GetWorkoutById(ctx context.Context, id int32) (Workout, error) {
	row := q.db.QueryRowContext(ctx, getWorkoutById, id)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkoutsByUserId = `-- name: GetWorkoutsByUserId :many
SELECT id, user_id, created_at, updated_at FROM workouts
WHERE user_id = $1
`

func (q *Queries) GetWorkoutsByUserId(ctx context.Context, userID int32) ([]Workout, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkout = `-- name: UpdateWorkout :exec
UPDATE workouts 
SET updated_at = $2
WHERE id = $1
`

type UpdateWorkoutParams struct {
	ID        int32
	UpdatedAt time.Time
}

func (q *Queries) UpdateWorkout(ctx context.Context, arg UpdateWorkoutParams) error {
	_, err := q.db.ExecContext(ctx, updateWorkout, arg.ID, arg.UpdatedAt)
	return err
}
