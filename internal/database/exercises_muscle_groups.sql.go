// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: exercises_muscle_groups.sql

package database

import (
	"context"
)

const createExerciseMuscleGroup = `-- name: CreateExerciseMuscleGroup :one
INSERT INTO exercises_muscle_groups (exercise_id, muscle_group_id)
VALUES ($1, $2)
RETURNING id, exercise_id, muscle_group_id
`

type CreateExerciseMuscleGroupParams struct {
	ExerciseID    int32
	MuscleGroupID int32
}

func (q *Queries) CreateExerciseMuscleGroup(ctx context.Context, arg CreateExerciseMuscleGroupParams) (ExercisesMuscleGroup, error) {
	row := q.db.QueryRowContext(ctx, createExerciseMuscleGroup, arg.ExerciseID, arg.MuscleGroupID)
	var i ExercisesMuscleGroup
	err := row.Scan(&i.ID, &i.ExerciseID, &i.MuscleGroupID)
	return i, err
}

const getMuscleGroupsByExercise = `-- name: GetMuscleGroupsByExercise :many
SELECT muscle_groups.id, muscle_groups.name, muscle_groups.photo_url 
FROM exercises_muscle_groups
JOIN muscle_groups ON muscle_groups.id = muscle_group_id
WHERE exercise_id = $1
`

func (q *Queries) GetMuscleGroupsByExercise(ctx context.Context, exerciseID int32) ([]MuscleGroup, error) {
	rows, err := q.db.QueryContext(ctx, getMuscleGroupsByExercise, exerciseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MuscleGroup
	for rows.Next() {
		var i MuscleGroup
		if err := rows.Scan(&i.ID, &i.Name, &i.PhotoUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
