// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: sets.sql

package database

import (
	"context"
)

const createSet = `-- name: CreateSet :one
INSERT INTO sets (workout_id, exercise_id, reps, weight)
VALUES ($1, $2, $3, $4)
RETURNING id, workout_id, exercise_id, reps, weight
`

type CreateSetParams struct {
	WorkoutID  int32
	ExerciseID int32
	Reps       int32
	Weight     int32
}

func (q *Queries) CreateSet(ctx context.Context, arg CreateSetParams) (Set, error) {
	row := q.db.QueryRowContext(ctx, createSet,
		arg.WorkoutID,
		arg.ExerciseID,
		arg.Reps,
		arg.Weight,
	)
	var i Set
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.ExerciseID,
		&i.Reps,
		&i.Weight,
	)
	return i, err
}

const getSets = `-- name: GetSets :many
SELECT id, workout_id, exercise_id, reps, weight FROM sets
`

func (q *Queries) GetSets(ctx context.Context) ([]Set, error) {
	rows, err := q.db.QueryContext(ctx, getSets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Set
	for rows.Next() {
		var i Set
		if err := rows.Scan(
			&i.ID,
			&i.WorkoutID,
			&i.ExerciseID,
			&i.Reps,
			&i.Weight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSetsByWorkout = `-- name: GetSetsByWorkout :many
SELECT id, workout_id, exercise_id, reps, weight FROM sets
WHERE workout_id = $1
`

func (q *Queries) GetSetsByWorkout(ctx context.Context, workoutID int32) ([]Set, error) {
	rows, err := q.db.QueryContext(ctx, getSetsByWorkout, workoutID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Set
	for rows.Next() {
		var i Set
		if err := rows.Scan(
			&i.ID,
			&i.WorkoutID,
			&i.ExerciseID,
			&i.Reps,
			&i.Weight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
